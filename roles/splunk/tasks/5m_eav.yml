---
- name: Set timezone to Europe/Rome
  timezone:
    name: Europe/Rome

- name: Set correct domain name
  include_tasks: 5m_hostname.yml

- name: Update the /etc/hosts file with node name
  tags: etchostsupdate
  become: yes
  become_user: root
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    regexp: ".*\t{{ hostvars[item]['inventory_hostname']}}"
    #line: "{{ hostvars[item]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}\t{{ hostvars[item]['ansible_hostname']}}{{ splunk_host_domain }}\t{{ hostvars[item]['ansible_hostname']}}"
    # line: "{{ hostvars[item]['ansible_host'] }}\t{{ hostvars[item]['inventory_hostname']}}"
    line: "{{ hostvars[item]['ansible_host'] }}\t{{ hostvars[item]['inventory_hostname']}}\t{{ hostvars[item]['ansible_fqdn'] }}"
    state: present
    backup: yes
  register: etchostsupdate
  when:
    - ansible_hostname != "{{ item }}"
    - configure_etc_hosts == True
  with_items: "{{ groups['full'] }}"

- name: Configure SSH keys
  include_tasks: 5m_ssh.yml

- name: Install or Upgrade Splunk
  include_tasks: check_splunk.yml

- name: Copy Certificates and keys
  include_tasks: 5m_certificates_and_keys.yml

- name: Configure outputs.conf
  community.general.ini_file:
    path: "{{ splunk_home }}/etc/system/local/outputs.conf"
    mode: 0644
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items:
    - { section: "indexAndForward", option: "index", value: "false" }
    - { section: "tcpout", option: "defaultGroup", value: "allIdxes" }
    - { section: "tcpout", option: "forwardedindex.filter.disable", value: "true" }
    - { section: "tcpout", option: "indexAndForward", value: "false" }
    - { section: "tcpout:allIdxes", option: "server", value: "splunk-indexer1:{{ splunk_tcpin_port }},splunk-indexer2:{{ splunk_tcpin_port }}" }
    - { section: "tcpout:allIdxes", option: "sslVerifyServerCert", value: "true" }
    - { section: "tcpout:allIdxes", option: "sslVerifyServerName", value: "true" }
    - { section: "tcpout:allIdxes", option: "clientCert", value: "{{ splunk_home }}/etc/auth/mycerts/serverCertificate.pem" }
    - { section: "tcpout:allIdxes", option: "sslPassword", value: "" }
    - { section: "tcpout:Idx1", option: "server", value: "splunk-indexer1:{{ splunk_tcpin_port }}" }
    - { section: "tcpout:Idx1", option: "sslVerifyServerCert", value: "true" }
    - { section: "tcpout:Idx1", option: "sslVerifyServerName", value: "true" }
    - { section: "tcpout:Idx1", option: "clientCert", value: "{{ splunk_home }}/etc/auth/mycerts/serverCertificate.pem" }
    - { section: "tcpout:Idx1", option: "sslPassword", value: "" }
    - { section: "tcpout:Idx2", option: "server", value: "splunk-indexer2:{{ splunk_tcpin_port }}" }
    - { section: "tcpout:Idx2", option: "sslVerifyServerCert", value: "true" }
    - { section: "tcpout:Idx2", option: "sslVerifyServerName", value: "true" }
    - { section: "tcpout:Idx2", option: "clientCert", value: "{{ splunk_home }}/etc/auth/mycerts/serverCertificate.pem" }
    - { section: "tcpout:Idx2", option: "sslPassword", value: "" }
  become: true
  notify: restart splunk
  when:
    - configure_customized_outputs == True
    - "'indexer' not in group_names"

- name: Configure sslConfig stanza in server.conf 
  ini_file:
    path: "{{ splunk_home }}/etc/system/local/server.conf"
    mode: 0644
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    section: sslConfig
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { option: "sslRootCAPath", value: "{{ splunk_home }}/etc/auth/mycerts/RootCA.pem" }
    - { option: "serverCert", value: "{{ splunk_home }}/etc/auth/mycerts/serverCertificate.pem" }
    - { option: "sslVersions", value: "*,-ssl2,-ssl3,-tls1.0,-tls1.1" }
    - { option: "sslVerifyServerCert", value: "true" }
    - { option: "sslPassword", value: ""}

- name: Configure settings stanza in web.conf
  ini_file:
    path: "{{ splunk_home }}/etc/system/local/web.conf"
    mode: 0644
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    section: settings
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { option: 'enableSplunkWebSSL', value: 'true' }
    - { option: 'privKeyPath', value: "{{ splunk_home }}/etc/auth/mycerts/serverPrivate.key" }
    - { option: "serverCert", value: "{{ splunk_home }}/etc/auth/mycerts/serverCertificate.pem" }
    #- { option: 'sslPassword', value: '' }

- name: Configure custom login content
  block:
    - name: Configure custom login content using inventory_hostname
      ini_file:
        path: "{{ splunk_home }}/etc/system/local/web.conf"
        section: settings
        option: login_content
        value: "<h1>{{ inventory_hostname }}</h1>"
        owner: "{{ splunk_nix_user }}"
        group: "{{ splunk_nix_group }}"
        mode: 0644
      become: true
      notify: restart splunk
      when:
        - inventory_hostname == ansible_host
    - name: Configure custom login content using both inventory_hostname and ansible_host
      ini_file:
        path: "{{ splunk_home }}/etc/system/local/web.conf"
        section: settings
        option: login_content
        value: "<h1>{{ inventory_hostname }} - {{ ansible_host }}</h1>"
        owner: "{{ splunk_nix_user }}"
        group: "{{ splunk_nix_group }}"
        mode: 0644
      become: true
      notify: restart splunk
      when:
        - inventory_hostname != ansible_host
  when:
    - customize_login_content == True

- name: Enable listen port "{{ splunk_tcpin_port }}"
  when: "'indexer' in group_names or 'heavyforwarder' in group_names"
  command: "{{ splunk_home }}/bin/splunk enable listen {{ splunk_tcpin_port }} -auth {{ splunk_auth }}"
  become: true
  become_user: "{{ splunk_nix_user }}"
  register: idx_tcp_input_result
  changed_when: idx_tcp_input_result.rc == 0
  failed_when: idx_tcp_input_result.rc != 0 and idx_tcp_input_result.rc != 22

- name: Configure SSL stanza in inputs.conf
  when: "'indexer' in group_names or 'heavyforwarder' in group_names"
  ini_file:
    path: "{{ splunk_home }}/etc/system/local/inputs.conf"
    mode: 0644
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    section: SSL
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { option: "serverCert", value: "{{ splunk_home }}/etc/auth/mycerts/serverCertificate.pem" }
    - { option: "sslPassword", value: "" }
    - { option: "requireClientCert", value: "true" }
    - { option: "sslVersions", value: "*,-ssl2,-ssl3,-tls1.0,-tls1.1" }
    #- { option: "sslCommonNameToCheck", value: "{{ common_name }}" }
    #- { option: "sslAltNameToCheck", value: "{{ sslAltName }}" }

- name: Start indexers
  include_tasks: splunk_start.yml

- name: Pause for 1 minutes to ensure the indexers are up&running
  pause:
    minutes: 1

- name: Enable search peers
  when: "'indexer' not in group_names"
  command: "{{ splunk_home }}/bin/splunk add search-server https://{{ item }}:{{ splunkd_port }} -auth {{ splunk_auth }} -remoteUsername {{ splunk_admin_username }} -remotePassword {{ splunk_admin_password }}"
  become: true
  become_user: "{{ splunk_nix_user }}"
  register: peer_add
  changed_when: peer_add.rc == 0
  failed_when: peer_add.rc != 0 and peer_add.rc != 24
  with_items: "{{ groups['indexer'] }}"

# Add all hosts to the DMC except indexer cluster hosts as per the docs
- name: Configure systems as search peers to be monitored included indexers
  command: "{{ splunk_home }}/bin/splunk add search-server https://{{ item }}:{{ splunkd_port }} -auth {{ splunk_auth }} -remoteUsername {{ splunk_admin_username }} -remotePassword {{ splunk_admin_password }}"
  #loop: "{{ splunk_dmc_not_indexers_list }}"
  loop: "{{ query('inventory_hostnames', all:!splunk-lm) }}"
  become: true
  become_user: "{{ splunk_nix_user }}"
  register: peer_add
  # no_log: true
  changed_when: peer_add.rc == 0
  failed_when: peer_add.rc != 0 and peer_add.rc != 24
  when: "'dmc' in group_names"
  #with_items: "{{ all | difference(groups['dmc'] + groups['licensemaster']) }}"

- name: Create local dir if it doesn't exist
  ansible.builtin.file:
    path: "{{ splunk_home }}/etc/apps/splunk_monitoring_console/local"
    state: directory
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    mode: 0744
  become: true
  become_user: "{{ splunk_nix_user }}"
  when: "'dmc' in group_names"

- name: Configure monitoring console in auto mode
  community.general.ini_file:
    path: "{{ splunk_home }}/etc/apps/splunk_monitoring_console/local/splunk_monitoring_console_assets.conf"
    section: 'settings'
    option: mc_auto_config
    value: enabled
    owner: "{{ splunk_nix_user }}"
    group: "{{ splunk_nix_group }}"
    mode: 0644
  become: true
  become_user: "{{ splunk_nix_user }}"
  when: "'dmc' in group_names"
  notify: restart splunk
